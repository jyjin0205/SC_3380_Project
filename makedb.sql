CREATE DATABASE playlist;

USE playlist;

CREATE TABLE ADMIN (
Id VARCHAR(50) NOT NULL PRIMARY KEY,
Name VARCHAR(50) NOT NULL,
Division VARCHAR(50) NOT NULL
);

CREATE TABLE PLAYLIST (
Id VARCHAR(50) NOT NULL PRIMARY KEY,
Name VARCHAR(50) NOT NULL,
Description VARCHAR(150),
Sharing_type BIT NOT NULL CHECK (Sharing_type IN (0, 1)),
Creater_id VARCHAR(50),
Creater_description VARCHAR(150),
FOREIGN KEY (Creater_id) REFERENCES ADMIN(Id)
);

CREATE TABLE USER (
Id VARCHAR(50) NOT NULL PRIMARY KEY,
Name VARCHAR(50) NOT NULL,
Password VARCHAR(50) NOT NULL,
Age INT NOT NULL CHECK (Age >= 0),
Current_playlist VARCHAR(50),
Playback_operation INT CHECK (Playback_operation IN (1, 2, 3, 4)),
Playback_status BIT CHECK (Playback_status IN (0, 1)),
FOREIGN KEY (Current_playlist) REFERENCES MUSIC(Id)
);

CREATE TABLE USERPLAYLIST (
User_id VARCHAR(50) NOT NULL,
Playlist_id VARCHAR(50) NOT NULL,
PRIMARY KEY (User_id, Playlist_id),
FOREIGN KEY (User_id) REFERENCES USER(Id),
FOREIGN KEY (Playlist_id) REFERENCES PLAYLIST(Id)
);

CREATE TABLE USERPLAYLIST_OWNINGSTATUS (
User_id VARCHAR(50) NOT NULL,
Playlist_id VARCHAR(50) NOT NULL,
Owning_status INT NOT NULL CHECK (Owning_status IN (1, 2)),
PRIMARY KEY (User_id, Playlist_id, Owning_status),
FOREIGN KEY (User_id, Playlist_id) REFERENCES USERPLAYLIST(User_id, Playlist_id)
);

CREATE TABLE MUSIC (
Id VARCHAR(50) NOT NULL PRIMARY KEY,
File VARCHAR(150) NOT NULL,
Title VARCHAR(50) NOT NULL,
Lyrics VARCHAR(150)
);

CREATE TABLE GENRE (
Music_Id VARCHAR(50) NOT NULL,
Genre VARCHAR(50) NOT NULL,
PRIMARY KEY (Music_Id, Genre),
FOREIGN KEY (Music_Id) REFERENCES MUSIC(Id)
);

CREATE TABLE ARTIST (
Id VARCHAR(50) NOT NULL PRIMARY KEY,
Name VARCHAR(50) NOT NULL
);

CREATE TABLE ARTISTMUSIC (
Artist_id VARCHAR(50) NOT NULL,
Music_id VARCHAR(50) NOT NULL,
PRIMARY KEY (Artist_id, Music_id),
FOREIGN KEY (Artist_id) REFERENCES ARTIST(Id),
FOREIGN KEY (Music_id) REFERENCES MUSIC(Id)
);

CREATE TABLE PLAYLISTMUSIC (
Playlist_id VARCHAR(50) NOT NULL,
Music_id VARCHAR(50) NOT NULL,
PRIMARY KEY (Playlist_id, Music_id),
FOREIGN KEY (Playlist_id) REFERENCES PLAYLIST(Id),
FOREIGN KEY (Music_id) REFERENCES MUSIC(Id)
);